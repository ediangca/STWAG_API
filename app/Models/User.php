<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use App\Mail\CustomMail as MailCustomMail;
use App\Notifications\CustomMail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\DB;

use Laravel\Sanctum\HasApiTokens;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use App\Notifications\CustomVerifyEmail;
use App\Notifications\PasswordResetMail;
use Illuminate\Support\Facades\Mail;

class User extends Authenticatable implements MustVerifyEmail
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasApiTokens, HasFactory, Notifiable;


    protected $primaryKey = 'user_id' // Set the primary key to user_id
    ;
    public $incrementing = false; // Disable auto-increment
    protected $keyType = 'string'; // Set the key type to string

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */

    protected $fillable = [
        'user_id',
        'firstname',
        'lastname',
        'birthdate',
        'email',
        'contactno',
        'password',
        'type',
        'referencecode', //generated by the system
        'uplinecode',
        'level', // 1, 2, 3 and if type is member it will automatically generated depended on the uplinecode
        'avatar', //default 0 
        'uuid', //unique
        'devicemodel',
    ];


    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    protected static function boot()
    {
        parent::boot();

        // Automatically generate a custom user_id when creating a new user
        static::creating(function ($model) {
            if (empty($model->user_id)) {
                $model->user_id = self::GenerateUserAccID(); // Call your custom function
            }
        });
    }

    /**
     * Call the SQL function to generate user_id.
     *
     * @return string
     */
    public static function GenerateUserAccID(): string
    {
        // Call the SQL function using Laravel's DB facade
        return DB::selectOne('SELECT GenerateUserAccID() AS user_id')->user_id;
    }

    /**
     * Determine if the user has verified their email address.
     *
     * @return bool
     */
    public function hasVerifiedEmail()
    {
        return !is_null($this->email_verified_at);
    }

    /**
     * Mark the given user's email as verified.
     *
     * @return bool
     */
    public function markEmailAsVerified()
    {
        return $this->forceFill([
            'email_verified_at' => $this->freshTimestamp(),
        ])->save();
    }

    /**
     * Send the email verification notification.
     *
     * @return void
     */
    public function sendEmailVerificationNotification()
    {
        // $this->notify(new \Illuminate\Auth\Notifications\VerifyEmail);

        $this->notify(new CustomVerifyEmail);
    }

    public function sendEmail($recipient, $subject, $message)
    {
        Mail::to($recipient->email)->send(new CustomMail($recipient, $subject, $message));
    }

    public function sendResetPasswordMail($recipient, $token)
    {
        Mail::to($recipient->email)->send(new PasswordResetMail($recipient, $token));
    }

    /**
     * Get the email address that should be used for verification.
     *
     * @return string
     */
    public function getEmailForVerification()
    {
        return $this->email;
    }

    /**
     * Get the wallet relationship for the user.
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    // App\Models\User.php
    public function wallet()
    {
        return $this->hasMany(Wallet::class, 'user_id', 'user_id');
    }
    // App\Models\User.php
    public function upline()
    {
        return $this->belongsTo(User::class, 'upline_id');
    }
}
